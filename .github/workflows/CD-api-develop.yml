# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "develop"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  workflow_dispatch:
  push:
    branches:
      - "develop"

env:
  PROJECT_ID: 'pofo-444903' # TODO: update to your Google Cloud project ID
  REGION: 'asia-northeast3' # TODO: update to your region
  SERVICE: 'pofo-api' # TODO: update to your service name
  # WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update to your workload identity provider
  GAR_NAME: 'pofo-docker'
  CLOUD_SQL_CONNECTION_NAME: 'pofo-444903:asia-northeast3:pofo-postgresql'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4
      - name: 'Setup Java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v4
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build
      #
      # If you already have a container image, you can omit these steps.
      - name: 'Docker Auth'
        run: |-
          gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev"

      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"

      - name: 'Deploy to Cloud Run'
        # END - Docker auth and build
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a pre-built image, update the image name below:
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_NAME }}/${{ env.SERVICE }}:${{ github.sha }}'
          flags: '--add-cloudsql-instances ${{ env.CLOUD_SQL_CONNECTION_NAME }}'
          env_vars: |-
            SPRING_PROFILES_ACTIVE=dev
            POSTGRES_DATASOURCE_URL=${{ secrets.POSTGRES_DATASOURCE_URL }}
            POSTGRES_DATASOURCE_USERNAME=${{ secrets.POSTGRES_DATASOURCE_USERNAME }}
            POSTGRES_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_DATASOURCE_PASSWORD }}
            OAUTH2_GITHUB_CLIENT_ID=${{ secrets.OAUTH2_GITHUB_CLIENT_ID }}
            OAUTH2_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH2_GITHUB_CLIENT_SECRET }}
            OAUTH2_GITHUB_REDIRECT_URI=${{ secrets.OAUTH2_GITHUB_REDIRECT_URI }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            POFO_DOMAIN=${{ secrets.POFO_DOMAIN }}

      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-
          echo ${{ steps.deploy.outputs.url }}
