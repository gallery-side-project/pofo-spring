type Project {
    id: Int!
    title: String!
    bio: String
    urls: [String]
    imageUrls: [String]
    keyImageIndex: Int
    content: String!
    isApproved: Boolean
    likes: Int
    category: String
    stacks: [String]
    authorName: String
}

type ProjectList {
    projects: [Project]!
    hasNext: Boolean!
    count: Int!
}

enum ProjectCategory {
    ALL
    WEB
    APP
    GAME
    GRAPHIC
    AI
    EMBEDDED
    LIBRARY
    ETC
}

input ProjectCreateRequest {
    title: String!
    bio: String
    urls: [String]
    imageUrls: [String]
    keyImageIndex: Int
    content: String!
    category: ProjectCategory
    stackNames: [String]
    isApproved: Boolean! = false
}

input ProjectUpdateRequest {
    projectId: ID!
    title: String
    bio: String
    urls: [String]
    imageUrls: [String]
    keyImageIndex: Int
    content: String
    category: ProjectCategory
    stackNames: [String]
}

input ProjectSearchRequest {
    title: String
    category: ProjectCategory
    stackNames: [String]
    page: Int! = 0
    size: Int! = 30
}

type Query {
    # 특정 ID로 프로젝트를 조회
    projectById(projectId: ID!): Project
    # 프로젝트 리스트 페이지네이션
    getAllProjectsByPagination(cursor: Int = 0, size: Int!): ProjectList
    # 제목, 카테고리, 스택을 이용한 프로젝트 검색
    searchProject(projectSearchRequest: ProjectSearchRequest): ProjectList
}

type Mutation {
    # 프로젝트 생성
    createProject(projectCreateRequest: ProjectCreateRequest): Project!
    # 프로젝트 업데이트
    updateProject(projectUpdateRequest: ProjectUpdateRequest): Project!
}
